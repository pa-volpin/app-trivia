{"version":3,"sources":["actions/playerAction.js","servicesAPI/gravatarAPI.js","actions/tokenAction.js","servicesAPI/triviaAPI.js","actions/timerAction.js","actions/authenticationAction.js","components/MenuResponsive.js","components/ProfileBarResponsive.js","components/Timer.js","components/Questions.js","pages/Game.js","pages/Login.js","pages/Feedback.js","actions/rankingAction.js","pages/Ranking.js","pages/Settings.js","actions/settingsAction.js","pages/NotFound.js","App.js","serviceWorker.js","reducers/playerReducer.js","reducers/tokenReducer.js","reducers/questionsReducer.js","actions/questionsAction.js","reducers/timerReducer.js","reducers/rankingReducer.js","reducers/settingsReducer.js","reducers/authenticationReducer.js","reducers/index.js","store/index.js","index.js","trivia.png"],"names":["playerLoginAction","player","type","name","gravatarEmail","gravatarAPI","email","HASH","md5","createTokenAction","tokenObj","fetchTokenAction","dispatch","fetch","then","response","json","r","localStorage","setItem","token","date","Date","catch","error","addTimerAction","seconds","updateAuthenticationAction","authenticationStatus","MenuResponsive","state","status","selected","handleClick","bind","logout","handleState","this","path","props","match","setState","history","updateAuthentication","clear","push","target","checked","links","content","role","className","src","logo","alt","id","onClick","htmlFor","map","link","index","linkClass","key","Component","withRouter","connect","e","ProfileBarResponsive","score","data-testid","data-test-id","hidden","Timer","timer","stop","clearInterval","interval","setInterval","addTimer","style","background","Questions","questions","actualQuestionIndex","selectedAnswer","handleQuestion","handleAnswers","handleUniqueAnswer","handleNext","prepareQuestions","sortRandomAnswers","settings","gameState","assertions","JSON","stringify","configu","amount","category","difficulty","amountAPI","undefined","questionsURL","results","questionsAPI","questionsPrepared","question","questionObj","incorrectAnswers","incorrect_answers","incorrect","ans","answerType","allAnswers","correct_answer","numberOfAnswers","length","allAnswersRandom","i","indexRandom","Math","round","random","splice","randomAnswers","actualQuestion","buttonNext","indexOfIncorrectAnswers","answer","testId","selectedClass","icon","disabled","easy","medium","hard","obj","addStop","addScore","scoreAdd","handleScore","assertion","playerObj","actualState","maximumQuantity","to","Game","Login","isDisabled","emailValidation","handleChange","toggeButton","clickButton","getItem","value","test","prevState","login","createToken","loggedPlayerName","validationClass","onChange","placeholder","Feedback","ranking","addPlayerRanking","filter","p","feedback","React","Ranking","sort","pA","pB","Settings","categories","isFetching","trivia_categories","addSettings","min","max","cat","config","NotFound","App","saveRanking","recoverPlayerRanking","storageRanking","storageAuthentication","storagePlayer","parse","component","exact","Boolean","window","location","hostname","INITIAL_STATE","playerReducer","action","tokenReducer","questionsReducer","timerReducer","rankingReducer","settingsReducer","authenticationReducer","combineReducers","createStore","rootReducer","compose","applyMiddleware","thunk","toReturn","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.31f8c671.chunk.js","sourcesContent":["const LOGIN = 'LOGIN';\nconst ADD_SCORE = 'ADD_SCORE';\n\nconst playerLoginAction = (player) => ({\n  type: LOGIN,\n  name: player.name,\n  gravatarEmail: player.gravatarEmail,\n});\n\nconst playerAddScoreAction = (player) => ({\n  type: ADD_SCORE,\n  score: player.score,\n  assertions: player.assertions,\n});\n\nexport { playerAddScoreAction, playerLoginAction, LOGIN, ADD_SCORE };\n","import md5 from 'crypto-js/md5';\n\nconst gravatarBaseURL = 'https://www.gravatar.com/avatar/';\n\nconst gravatarAPI = (email) => {\n  const HASH = md5(email);\n  const gravatarImageSrc = `${gravatarBaseURL}${HASH}`;\n  return gravatarImageSrc;\n};\n\nexport default gravatarAPI;\n","import { tokenAPI } from '../servicesAPI';\n\nconst ADD_TOKEN = 'ADD_TOKEN';\n\nconst createTokenAction = (tokenObj) => ({ type: ADD_TOKEN, tokenObj });\n\nfunction fetchTokenAction() {\n  return (dispatch) => {\n    const tokenRequest = tokenAPI()\n      .then(\n        (response) => dispatch(createTokenAction(response)),\n      )\n      .catch(\n        (error) => dispatch(createTokenAction(error)),\n      );\n    return tokenRequest;\n  };\n}\n\nexport default fetchTokenAction;\nexport { ADD_TOKEN };\n","const tokenURL = 'https://opentdb.com/api_token.php?command=request';\n\nconst tokenAPI = () => fetch(tokenURL)\n  .then((response) => response.json())\n  .then((r) => {\n    localStorage.setItem('token', r.token);\n    return ({ token: r.token, date: new Date() });\n  })\n  .catch(() => {\n    localStorage.setItem('token', 'ERROR_TOKEN');\n    return ({ token: 'ERROR_TOKEN', date: 'ERROR_TOKEN' });\n  });\n\nconst questionsBaseURL = 'https://opentdb.com/api.php?';\nconst defaultAmount = 5;\n\nconst questionsAPI = (configu) => {\n  const { amount, category, difficulty, token, type } = configu;\n  let amountAPI = (amount === '' || amount === 0 || amount === undefined)\n    ? defaultAmount : amount;\n  const magicNumberFifty = 50;\n  if (amountAPI > magicNumberFifty) amountAPI = magicNumberFifty;\n  let questionsURL = `${questionsBaseURL}amount=${amountAPI}&token=${token}`;\n  if (type !== '' && type !== 'any') questionsURL += `&type=${type}`;\n  if (category !== '' && category !== 'any') questionsURL += `&category=${category}`;\n  if (difficulty !== '' && difficulty !== 'any') {\n    questionsURL += `&difficulty=${difficulty}`;\n  }\n  return fetch(questionsURL)\n    .then((response) => response.json())\n    .then((r) => r.results)\n    .catch(() => 'ERROR_QUESTIONS');\n};\n\nconst getCategoriesAPI = () => {\n  const categoriesURL = 'https://opentdb.com/api_category.php';\n  return fetch(categoriesURL)\n    .then((response) => response.json())\n    .then((r) => r.trivia_categories)\n    .catch(() => 'ERROR_QUESTIONS');\n};\n\nexport { tokenAPI, questionsAPI, getCategoriesAPI };\n","const ADD_TIMER = 'ADD_TIMER';\nconst ADD_STOP = 'ADD_STOP';\n\nconst addTimerAction = (seconds) => ({ type: ADD_TIMER, seconds });\nconst addStopAction = (stop) => ({ type: ADD_STOP, stop });\n\nexport { addTimerAction, addStopAction, ADD_TIMER, ADD_STOP };\n","const UPDATE_AUTHENTICATION = 'UPDATE_AUTHENTICATION';\n\nconst updateAuthenticationAction = (authenticationStatus) => ({\n  type: UPDATE_AUTHENTICATION,\n  authenticationStatus,\n});\n\nexport default updateAuthenticationAction;\nexport { UPDATE_AUTHENTICATION };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport './MenuResponsive.css';\nimport { FaBars, FaTimes } from 'react-icons/fa';\nimport { updateAuthenticationAction } from '../actions';\nimport logo from '../trivia.png';\n\nclass MenuResponsive extends Component {\n  constructor() {\n    super();\n    this.state = { status: 'closed', selected: '' };\n    this.handleClick = this.handleClick.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleState = this.handleState.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleState();\n  }\n\n  handleState() {\n    const { match: { path } } = this.props;\n    this.setState({ selected: path });\n  }\n\n  logout() {\n    const { history, updateAuthentication } = this.props;\n    updateAuthentication(false);\n    localStorage.setItem('authentified', false);\n    localStorage.clear('state');\n    history.push('/');\n  }\n\n  handleClick({ target }) {\n    const { checked, type, name } = target;\n    if (type === 'checkbox') {\n      const status = (checked) ? 'open' : 'closed';\n      this.setState({ status });\n    } else {\n      const { history } = this.props;\n      if (name === '/') this.logout();\n      this.setState({ selected: name }, () => history.push(name));\n    }\n  }\n\n  render() {\n    const { status, selected } = this.state;\n    const { authenticationStatus } = this.props;\n\n    let links = [\n      { content: 'Game', path: '/game' },\n      { content: 'Ranking', path: '/ranking' },\n      { content: 'Settings', path: '/settings' },\n      { content: 'Logout', path: '/' },\n\n    ];\n    if (!authenticationStatus) {\n      links = [\n        { content: 'Login', path: '/' },\n        { content: 'Settings', path: '/settings' },\n      ];\n    }\n\n    return (\n      <section>\n        <nav role=\"navigation\" className={ `menu ${status}` }>\n          {/* Logo */}\n          <div className=\"logo-area\">\n            <img src={ logo } alt=\"trivia logo\" />\n          </div>\n          {/* Icone Hamburguer do Menu */}\n          <input type=\"checkbox\" id=\"toggle\" onClick={ this.handleClick } />\n          <label htmlFor=\"toggle\" className=\"menu-toggle\">\n            { status === 'closed'\n              ? <FaBars className=\"menu-icon\" /> : <FaTimes className=\"menu-icon\" /> }\n          </label>\n          {/* Conteúdo do Menu que desce em dropdpwn */}\n          <nav className=\"menu-content\">\n            { links.map((link, index) => {\n              const linkClass = (link.path === selected)\n                ? 'link selected' : 'link';\n              return (\n                <button\n                  key={ index }\n                  type=\"button\"\n                  className={ linkClass }\n                  onClick={ this.handleClick }\n                  name={ link.path }\n                >\n                  { link.content }\n                </button>\n              );\n            })}\n          </nav>\n        </nav>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  authenticationStatus: state.authenticationStatus,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateAuthentication: (e) => dispatch(updateAuthenticationAction(e)),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MenuResponsive));\n\nMenuResponsive.propTypes = {\n  match: PropTypes.shape.isRequired,\n  path: PropTypes.string.isRequired,\n  history: PropTypes.shape.isRequired,\n  updateAuthentication: PropTypes.func.isRequired,\n  authenticationStatus: PropTypes.bool.isRequired,\n};\n","import React, { Component } from 'react';\nimport './ProfileBarResponsive.css';\nimport { FaChevronDown, FaChevronUp } from 'react-icons/fa';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { gravatarAPI } from '../servicesAPI';\n\nclass ProfileBarResponsive extends Component {\n  constructor() {\n    super();\n    this.state = { status: 'closed' };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick({ target }) {\n    const { checked } = target;\n    this.setState({ status: (checked) ? 'open' : 'closed' });\n  }\n\n  render() {\n    const { gravatarEmail, name, score } = this.props;\n    const { status } = this.state;\n    return (\n      <section className={ `profile-bar ${status}` }>\n        <div className=\"user-infos\">\n          <img\n            alt=\"user avatar\"\n            data-testid=\"header-profile-picture\"\n            src={ gravatarAPI(gravatarEmail) }\n          />\n          <p data-test-id=\"input-player-name\" hidden>{ gravatarEmail }</p>\n          <p data-testid=\"header-player-name\">{ name }</p>\n        </div>\n        <div className=\"score\">\n          Score:\n          <span data-testid=\"header-score\">{ score }</span>\n        </div>\n        <input\n          type=\"checkbox\"\n          id=\"toggle-profile-bar\"\n          onClick={ this.handleClick }\n        />\n        <label htmlFor=\"toggle-profile-bar\">\n          { status === 'closed' ? <FaChevronDown /> : <FaChevronUp /> }\n        </label>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  gravatarEmail: state.player.gravatarEmail,\n  name: state.player.name,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(ProfileBarResponsive);\n\nProfileBarResponsive.propTypes = {\n  gravatarEmail: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addTimerAction } from '../actions';\nimport './Timer.css';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.timer = this.timer.bind(this);\n  }\n\n  componentDidMount() {\n    this.timer();\n  }\n\n  componentDidUpdate() {\n    const { stop, seconds } = this.props;\n    if (stop || seconds === 0) this.timer();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  timer() {\n    const magicThousand = 1000;\n    this.interval = setInterval(() => {\n      const { stop, seconds } = this.props;\n      if (seconds > 0 && !stop) {\n        const { addTimer } = this.props;\n        addTimer(seconds - 1);\n      } else {\n        clearInterval(this.interval);\n      }\n    }, magicThousand);\n  }\n\n  render() {\n    const { seconds } = this.props;\n    const magicThirty = 30;\n    return (\n      <div\n        className=\"timer\"\n      >\n        <p\n          style={ { background:\n            `linear-gradient(90deg, rgb(255,38,116) ${(seconds / magicThirty) * 100}%,\n              white ${(seconds / magicThirty) * 100}%,\n              white ${100 - (seconds * 100) / magicThirty}%,\n              white ${100 - (seconds * 100) / magicThirty}%)` } }\n        >\n          { `Tempo restante: ${seconds}` }\n        </p>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTimer: (e) => dispatch(addTimerAction(e)),\n});\n\nconst mapStateToProps = (state) => ({\n  stop: state.timer.stop,\n  seconds: state.timer.seconds,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n\nTimer.propTypes = {\n  addTimer: PropTypes.func.isRequired,\n  stop: PropTypes.bool.isRequired,\n  seconds: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\nimport { questionsAPI } from '../servicesAPI';\nimport { addStopAction, addTimerAction, playerAddScoreAction } from '../actions';\nimport Timer from './Timer';\nimport './Questions.css';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: [],\n      actualQuestionIndex: 0,\n      selectedAnswer: '',\n      selected: '',\n    };\n    this.handleQuestion = this.handleQuestion.bind(this);\n    this.handleAnswers = this.handleAnswers.bind(this);\n    this.handleUniqueAnswer = this.handleUniqueAnswer.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.prepareQuestions = this.prepareQuestions.bind(this);\n    this.sortRandomAnswers = this.sortRandomAnswers.bind(this);\n  }\n\n  componentDidMount() {\n    const { tokenObj: { token }, name, gravatarEmail, settings, seconds } = this.props;\n    const gameState = { player: { name, assertions: 0, score: 0, gravatarEmail } };\n    localStorage.setItem('state', JSON.stringify(gameState));\n    if (seconds === 0) this.handleUniqueAnswer('incorrect');\n    questionsAPI({ ...settings, token })\n      .then((r) => this.prepareQuestions(r))\n      .catch((r) => this.setState({ questions: r }));\n  }\n\n  prepareQuestions(questions) {\n    const questionsPrepared = questions\n      .map((question) => this.sortRandomAnswers(question));\n    this.setState({ questions: questionsPrepared });\n  }\n\n  sortRandomAnswers(questionObj) {\n    const incorrectAnswers = questionObj.incorrect_answers\n      .map((incorrect) => ({ ans: incorrect, answerType: 'incorrect' }));\n    const correctAnswer = { ans: questionObj.correct_answer, answerType: 'correct' };\n    const allAnswers = [correctAnswer, ...incorrectAnswers];\n    const numberOfAnswers = allAnswers.length;\n    const allAnswersRandom = [];\n    for (let i = 0; i < numberOfAnswers; i += 1) {\n      const indexRandom = Math.round(Math.random() * (allAnswers.length - 1));\n      allAnswersRandom[i] = allAnswers[indexRandom];\n      allAnswers.splice(indexRandom, 1);\n    }\n    questionObj.randomAnswers = allAnswersRandom;\n    return questionObj;\n  }\n\n  handleQuestion(index) {\n    const { questions, selectedAnswer } = this.state;\n    const { seconds } = this.props;\n    const actualQuestion = questions[index];\n    const buttonNext = (\n      <div className=\"button-area\">\n        <button\n          className=\"next-button\"\n          data-testid=\"btn-next\"\n          type=\"button\"\n          onClick={ this.handleNext }\n        >\n          Next\n        </button>\n      </div>);\n    return (\n      <article className=\"question-container\">\n        <div className=\"category-container\">\n          <p\n            className=\"category\"\n            data-testid=\"question-category\"\n          >\n            { actualQuestion.category }\n          </p>\n        </div>\n        <div className=\"question\">\n          <p data-testid=\"question-text\">{ actualQuestion.question }</p>\n        </div>\n        <div className=\"answers\">\n          { this.handleAnswers(actualQuestion) }\n        </div>\n        { (selectedAnswer !== '' || seconds === 0) ? buttonNext : '' }\n      </article>\n    );\n  }\n\n  handleAnswers(question) {\n    const { randomAnswers } = question;\n    let indexOfIncorrectAnswers = 0;\n    return randomAnswers.map((answer, index) => {\n      const { ans, answerType } = answer;\n      const testId = (answerType === 'correct')\n        ? 'correct-answer' : `wrong-answer-${indexOfIncorrectAnswers}`;\n      indexOfIncorrectAnswers = (answerType === 'incorrect')\n        ? indexOfIncorrectAnswers + 1 : indexOfIncorrectAnswers;\n      const { selectedAnswer, selected } = this.state;\n      const { seconds } = this.props;\n      const selectedClass = (index === selected) ? 'selected' : '';\n      const icon = (answerType === 'correct') ? <FaCheckCircle /> : <FaTimesCircle />;\n      return (\n        <button\n          key={ index }\n          id={ index }\n          type=\"button\"\n          name={ answerType }\n          data-testid={ testId }\n          className={ (selectedAnswer !== '' || seconds === 0)\n            ? `${answerType}-answer ${selectedClass}` : '' }\n          onClick={ () => this.handleUniqueAnswer({ answerType, index }) }\n          disabled={ (selectedAnswer !== '' || seconds === 0) }\n        >\n          <p>{ ans }</p>\n          <div className=\"icon\">\n            { (selectedAnswer !== '' || seconds === 0) ? icon : '' }\n          </div>\n        </button>\n      );\n    });\n  }\n\n  handleScore(timer) {\n    const { questions, actualQuestionIndex } = this.state;\n    const { difficulty } = questions[actualQuestionIndex];\n    const level = { easy: 1, medium: 2, hard: 3 };\n    const difficultyMultiplier = level[difficulty];\n    const magicNumberTen = 10;\n    const score = magicNumberTen + (timer * difficultyMultiplier);\n    return score;\n  }\n\n  handleUniqueAnswer(obj) {\n    const { answerType, index } = obj;\n    const { seconds, addStop, addScore, name, gravatarEmail,\n      score, assertions } = this.props;\n    const scoreAdd = (answerType === 'correct') ? this.handleScore(seconds) : 0;\n    const assertion = (answerType === 'correct') ? 1 : 0;\n    const playerObj = { player: {\n      name,\n      gravatarEmail,\n      score: score + scoreAdd,\n      assertions: assertions + assertion,\n    } };\n    localStorage.setItem('state', JSON.stringify(playerObj));\n    addScore({ score: scoreAdd, assertions: assertion });\n    addStop(true);\n    this.setState({ selectedAnswer: answerType, selected: index });\n  }\n\n  handleNext() {\n    const { addTimer, addStop } = this.props;\n    const magicNumberThirty = 30;\n    addTimer(magicNumberThirty);\n    addStop(false);\n    this.setState((actualState) => ({\n      actualQuestionIndex: actualState.actualQuestionIndex + 1,\n      selectedAnswer: '',\n      selected: '',\n    }));\n  }\n\n  render() {\n    const { questions, actualQuestionIndex, selected } = this.state;\n    const { seconds, settings } = this.props;\n    const { amount } = settings;\n    const maximumQuantity = amount;\n    const aboutQuestions = () => {\n      const loadingOrQuestion = (questions !== 'ERROR_QUESTIONS' && questions.length > 0)\n        ? this.handleQuestion(actualQuestionIndex)\n        : (<div className=\"loader-container\"><div className=\"loader\" /></div>);\n      return loadingOrQuestion;\n    };\n    return (\n      <div className=\"questions-timer-container\">\n        { (questions !== 'ERROR_QUESTIONS' && ((seconds > 0 && selected === ''))\n          && questions.length > 0) && <Timer /> }\n        { (questions === 'ERROR_QUESTIONS' && actualQuestionIndex < maximumQuantity)\n          ? 'ERROR' : '' }\n        { (actualQuestionIndex < maximumQuantity)\n          ? aboutQuestions() : <Redirect to=\"/feedback\" /> }\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTimer: (e) => dispatch(addTimerAction(e)),\n  addStop: (e) => dispatch(addStopAction(e)),\n  addScore: (e) => dispatch(playerAddScoreAction(e)),\n});\n\nconst mapStateToProps = (state) => ({\n  settings: state.settings,\n  tokenObj: state.tokenObj,\n  seconds: state.timer.seconds,\n  name: state.player.name,\n  gravatarEmail: state.player.gravatarEmail,\n  score: state.player.score,\n  assertions: state.player.assertions,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n\nQuestions.propTypes = {\n  tokenObj: PropTypes.shape.isRequired,\n  settings: PropTypes.shape.isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  seconds: PropTypes.number.isRequired,\n  addStop: PropTypes.func.isRequired,\n  addScore: PropTypes.func.isRequired,\n  addTimer: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { MenuResponsive, ProfileBarResponsive, Questions } from '../components';\nimport './Game.css';\n\nclass Game extends Component {\n  componentDidMount() {\n    const { history, authenticationStatus } = this.props;\n    if (!authenticationStatus) history.push('/');\n  }\n\n  render() {\n    const { tokenObj: { token } } = this.props;\n    return (\n      <div className=\"game-container\">\n        <MenuResponsive />\n        <ProfileBarResponsive />\n        <div className=\"game-questions-container\">\n          { (token === 'ERROR_TOKEN') ? <p>Falha Temporária</p> : <Questions />}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  tokenObj: state.tokenObj,\n  authenticationStatus: state.authenticationStatus,\n});\n\nexport default connect(mapStateToProps)(Game);\n\nGame.propTypes = {\n  tokenObj: PropTypes.objectOf(PropTypes.string).isRequired,\n  authenticationStatus: PropTypes.bool.isRequired,\n  history: PropTypes.shape.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { FaEnvelope, FaUser, FaCheckCircle, FaTimesCircle, FaCog } from 'react-icons/fa';\nimport { playerLoginAction, fetchTokenAction,\n  updateAuthenticationAction } from '../actions';\nimport './Login.css';\nimport logo from '../trivia.png';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      gravatarEmail: '',\n      isDisabled: true,\n      emailValidation: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.toggeButton = this.toggeButton.bind(this);\n    this.clickButton = this.clickButton.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleState = this.handleState.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleState();\n  }\n\n  handleState() {\n    if (localStorage.getItem('authentified')) this.setState({ isDisabled: false });\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => {\n      this.toggeButton();\n    });\n  }\n\n  toggeButton() {\n    const { gravatarEmail, name } = this.state;\n    const reg = /^((?!\\.)[\\w-_.]*[^.])(@\\w+)(\\.\\w+(\\.\\w+)?[^.\\W])$/;\n    const emailValidation = reg.test(gravatarEmail);\n    const isDisabled = (!emailValidation || name === '');\n    this.setState((prevState) => {\n      const obj = prevState.gravatarEmail !== ''\n        ? ({ emailValidation, isDisabled })\n        : ({ emailValidation: '', isDisabled });\n      return obj;\n    });\n  }\n\n  clickButton() {\n    const { login, createToken, updateAuthentication } = this.props;\n    const { name, gravatarEmail } = this.state;\n    login({ name, gravatarEmail });\n    localStorage.setItem('authentified', true);\n    updateAuthentication(true);\n    createToken();\n  }\n\n  logout() {\n    const { history, updateAuthentication } = this.props;\n    updateAuthentication(false);\n    localStorage.setItem('authentified', false);\n    localStorage.clear('state');\n    history.push('/');\n  }\n\n  render() {\n    const { name, gravatarEmail, emailValidation, isDisabled } = this.state;\n    const { authenticationStatus, player: { name: loggedPlayerName } } = this.props;\n    let validationClass = '';\n    if (emailValidation !== '') {\n      validationClass = emailValidation ? 'valid' : 'invalid';\n    }\n\n    return (\n      <div className=\"main-container\">\n        <div className=\"image-container\">\n          <img src={ logo } alt=\"logo\" />\n        </div>\n        <form className=\"form-container\">\n          <fieldset className=\"header-area\">\n            <Link to=\"/settings\">\n              <FaCog\n                className=\"settings-button\"\n                type=\"button\"\n                data-testid=\"btn-settings\"\n              />\n            </Link>\n          </fieldset>\n          <fieldset className=\"inputs-container\">\n            <label\n              htmlFor=\"name-input\"\n              className=\"input-label-container\"\n              hidden={ authenticationStatus }\n            >\n              Name\n              <div className=\"input-box\">\n                <FaUser className=\"icone\" />\n                <input\n                  type=\"text\"\n                  id=\"name-input\"\n                  onChange={ this.handleChange }\n                  value={ name }\n                  name=\"name\"\n                  placeholder=\"Enter your name\"\n                  data-testid=\"input-player-name\"\n                />\n              </div>\n            </label>\n            <label\n              htmlFor=\"email-input\"\n              className=\"input-label-container\"\n              hidden={ authenticationStatus }\n            >\n              Email\n              <div className={ `input-box ${validationClass}` }>\n                <FaEnvelope className={ `icone ${validationClass}` } />\n                <input\n                  id=\"email-input\"\n                  type=\"email\"\n                  onChange={ this.handleChange }\n                  value={ gravatarEmail }\n                  name=\"gravatarEmail\"\n                  placeholder=\"Enter your email\"\n                  data-testid=\"input-gravatar-email\"\n                />\n                { emailValidation && <FaCheckCircle className=\"icone valid\" /> }\n                { emailValidation === false\n                && <FaTimesCircle className=\"icone invalid\" /> }\n              </div>\n              <p className={ `text-helper ${validationClass}` }>\n              Email should be like user@gmail.com\n              </p>\n            </label>\n            { authenticationStatus\n              && <p>{ `Already logged as ${loggedPlayerName}` }</p> }\n          </fieldset>\n          <fieldset className=\"buttons-area\">\n            <Link to=\"/game\">\n              <button\n                className={ (isDisabled) ? 'play-button-disabled' : 'play-button' }\n                type=\"submit\"\n                disabled={ isDisabled }\n                data-testid=\"btn-play\"\n                onClick={ this.clickButton }\n              >\n                Play Now\n              </button>\n            </Link>\n            { authenticationStatus\n              && (\n                <Link to=\"/\">\n                  <button\n                    className=\"change-account-button\"\n                    type=\"button\"\n                    onClick={ this.logout }\n                  >\n                    Change account\n                  </button>\n                </Link>) }\n          </fieldset>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateAuthentication: (e) => dispatch(updateAuthenticationAction(e)),\n  login: (e) => dispatch(playerLoginAction(e)),\n  createToken: () => dispatch(fetchTokenAction()),\n});\n\nconst mapStateToProps = (state) => ({\n  authenticationStatus: state.authenticationStatus,\n  player: state.player,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  login: PropTypes.func.isRequired,\n  createToken: PropTypes.func.isRequired,\n  updateAuthentication: PropTypes.func.isRequired,\n  authenticationStatus: PropTypes.bool.isRequired,\n  player: PropTypes.shape.isRequired,\n  history: PropTypes.shape.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { addPlayerRankingAction } from '../actions';\nimport { MenuResponsive, ProfileBarResponsive } from '../components';\nimport './Feedback.css';\n\nclass Feedback extends React.Component {\n  componentDidMount() {\n    const { player, ranking, addPlayerRanking,\n      history, authenticationStatus } = this.props;\n    const { name, gravatarEmail } = player;\n    if (!authenticationStatus) history.push('/');\n    const alreadyInRanking = ranking.filter((p) => (p.name === name\n      && p.gravatarEmail === gravatarEmail));\n    if (alreadyInRanking.length === 0) addPlayerRanking(player);\n  }\n\n  render() {\n    const feedback = {\n      ltThree: 'Podia ser melhor...',\n      geThree: 'Mandou bem!',\n    };\n    const { score, assertions } = this.props;\n    const threeCorrectAnswers = 3;\n\n    return (\n      <div>\n        <MenuResponsive />\n        <ProfileBarResponsive />\n        <div className=\"feedback-container\">\n          <p data-testid=\"feedback-text\">\n            { assertions >= threeCorrectAnswers ? feedback.geThree : feedback.ltThree }\n          </p>\n          <div className=\"results-container\">\n            <div className=\"results-header\">\n              <p>RESULTS</p>\n            </div>\n            <div className=\"results-score\">\n              <p>SCORE</p>\n              <p data-testid=\"feedback-total-score\" className=\"score\">{score}</p>\n            </div>\n            <div className=\"results-score\">\n              <p>ASSERTIONS</p>\n              <p data-testid=\"feedback-total-question\" className=\"score\">{assertions}</p>\n            </div>\n            <div className=\"replay-button-area\">\n              <Link to=\"/\">\n                <button\n                  className=\"replay-button\"\n                  type=\"button\"\n                  data-testid=\"btn-play-again\"\n                >\n                  Play Again\n                </button>\n              </Link>\n              <Link to=\"/ranking\">\n                <button\n                  className=\"ranking-button\"\n                  type=\"button\"\n                  data-testid=\"btn-ranking\"\n                >\n                  See Ranking\n                </button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ranking: state.ranking,\n  player: state.player,\n  score: state.player.score,\n  assertions: state.player.assertions,\n  authenticationStatus: state.authenticationStatus,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addPlayerRanking: (e) => dispatch(addPlayerRankingAction(e)),\n});\n\nFeedback.propTypes = {\n  addPlayerRanking: PropTypes.func.isRequired,\n  ranking: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  player: PropTypes.shape.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  authenticationStatus: PropTypes.bool.isRequired,\n  history: PropTypes.shape.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","const ADD_PLAYER_RANKING = 'ADD_PLAYER_RANKING';\nconst RECOVER_PLAYER_RANKING = 'RECOVER_PLAYER_RANKING';\n\nconst addPlayerRankingAction = (player) => ({\n  type: ADD_PLAYER_RANKING,\n  player,\n});\n\nconst recoverPlayerRankingAction = (ranking) => ({\n  type: RECOVER_PLAYER_RANKING,\n  ranking,\n});\n\nexport { addPlayerRankingAction, recoverPlayerRankingAction };\nexport { ADD_PLAYER_RANKING, RECOVER_PLAYER_RANKING };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { MenuResponsive } from '../components';\nimport { gravatarAPI } from '../servicesAPI';\nimport './Ranking.css';\n\nclass Ranking extends React.Component {\n  componentDidMount() {\n    const { history, authenticationStatus } = this.props;\n    if (!authenticationStatus) history.push('/');\n  }\n\n  render() {\n    const { ranking, authenticationStatus } = this.props;\n    return (\n      <div>\n        <MenuResponsive />\n        <section className=\"ranking-container\">\n          <div className=\"ranking-header\">\n            <p data-testid=\"ranking-title\">Ranking</p>\n          </div>\n          { ranking.length === 0 && <p>Play and be the first!</p>}\n          <div className=\"ranking-players\">\n            { ranking.length !== 0 && ranking.sort((pA, pB) => pB.score - pA.score)\n              .map((player, index) => {\n                const { gravatarEmail, name, score } = player;\n                return (\n                  <div key={ index } className=\"player-container\">\n                    <div className=\"ranking-index-container\">\n                      <p className=\"ranking-index\">{ index + 1 }</p>\n                    </div>\n                    <div className=\"user-infos\">\n                      <img\n                        alt=\"user avatar\"\n                        data-testid=\"header-profile-picture\"\n                        src={ gravatarAPI(gravatarEmail) }\n                      />\n                      <p data-testid={ `player-name-${index}` }>{ name }</p>\n                    </div>\n                    <div className=\"score\">\n                      Score:\n                      <span data-testid={ `player-score-${index}` }>{ score }</span>\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n          <div className=\"ranking-button-area\">\n            { authenticationStatus\n              && (\n                <Link to=\"/game\">\n                  <button\n                    type=\"button\"\n                  >\n                    Play Now\n                  </button>\n                </Link>\n              )}\n            <Link to=\"/\">\n              <button\n                className={ (authenticationStatus) && 'second-button' }\n                type=\"button\"\n                data-testid=\"btn-go-home\"\n              >\n                Go Home\n              </button>\n            </Link>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ranking: state.ranking,\n  authenticationStatus: state.authenticationStatus,\n});\n\nRanking.propTypes = {\n  ranking: PropTypes.shape.isRequired,\n  authenticationStatus: PropTypes.bool.isRequired,\n  history: PropTypes.shape.isRequired,\n};\n\nexport default connect(mapStateToProps)(Ranking);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { MenuResponsive } from '../components';\nimport { getCategoriesAPI } from '../servicesAPI';\nimport './Settings.css';\nimport { addSettingsAction } from '../actions';\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n    const { settings } = this.props;\n    const { difficulty, type, amount, category } = settings;\n    this.state = {\n      difficulty,\n      category,\n      amount,\n      type,\n      categories: [],\n      isFetching: true,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleState = this.handleState.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleState();\n  }\n\n  componentWillUnmount() {\n    this.setState({ isFetching: false });\n  }\n\n  handleState() {\n    const { isFetching } = this.state;\n    if (!isFetching) {\n      getCategoriesAPI()\n        .then((r) => this.setState({ categories: r, isFetching: false }));\n    }\n  }\n\n  handleClick({ target }) {\n    const { name, value } = target;\n    const { addSettings } = this.props;\n    this.setState({ [name]: value });\n    addSettings({ [name]: value });\n  }\n\n  render() {\n    const { difficulty, amount, category, type, categories } = this.state;\n    const { authenticationStatus } = this.props;\n    return (\n      <div>\n        <MenuResponsive />\n        <section className=\"settings-container\">\n          <div className=\"settings-header\">\n            <p data-testid=\"settings-title\">Settings</p>\n          </div>\n          <form className=\"parameters-container\">\n            <label htmlFor=\"amount\" className=\"parameter\">\n              <p className=\"parameter-title\">Amount of Questions</p>\n              <input\n                min=\"5\"\n                max=\"50\"\n                type=\"number\"\n                className=\"parameter-options\"\n                name=\"amount\"\n                id=\"amount\"\n                placeholder=\"Insert a number\"\n                onChange={ this.handleClick }\n                value={ amount }\n              />\n            </label>\n            <label htmlFor=\"difficulty\" className=\"parameter\">\n              <p className=\"parameter-title\">Difficulty</p>\n              <select\n                className=\"parameter-options\"\n                name=\"difficulty\"\n                id=\"difficulty\"\n                onChange={ this.handleClick }\n                value={ difficulty }\n              >\n                { difficulty === '' && <option>Select an option</option> }\n                <option value=\"any\">Any Difficulty</option>\n                <option value=\"easy\">Easy</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"hard\">Hard</option>\n              </select>\n            </label>\n            <label htmlFor=\"type\" className=\"parameter\">\n              <p className=\"parameter-title\">Type</p>\n              <select\n                className=\"parameter-options\"\n                name=\"type\"\n                id=\"type\"\n                onChange={ this.handleClick }\n                value={ type }\n              >\n                { type === '' && <option>Select an option</option> }\n                <option value=\"any\">Any Type</option>\n                <option value=\"boolean\">True / False</option>\n                <option value=\"multiple\">Multiple Choice</option>\n              </select>\n            </label>\n            <label htmlFor=\"category\" className=\"parameter\">\n              <p className=\"parameter-title\">Category</p>\n              <select\n                className=\"parameter-options\"\n                name=\"category\"\n                id=\"category\"\n                onChange={ this.handleClick }\n                value={ category }\n              >\n                { category === '' && <option>Select an option</option> }\n                <option value=\"any\">Any Category</option>\n                { categories.length > 0 && categories.map((cat) => (\n                  <option key={ cat.id } value={ cat.id }>{ cat.name }</option>)) }\n              </select>\n            </label>\n          </form>\n          <div className=\"settings-button-area\">\n            { authenticationStatus\n              && (\n                <Link to=\"/game\">\n                  <button\n                    type=\"submit\"\n                  >\n                    Play Now\n                  </button>\n                </Link>)}\n            <Link to=\"/\">\n              <button\n                className={ (authenticationStatus) && 'second-button' }\n                type=\"button\"\n              >\n                Go Home\n              </button>\n            </Link>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addSettings: (e) => dispatch(addSettingsAction(e)),\n});\n\nconst mapStateToProps = (state) => ({\n  settings: state.settings,\n  authenticationStatus: state.authenticationStatus,\n});\n\nSettings.propTypes = {\n  settings: PropTypes.shape.isRequired,\n  addSettings: PropTypes.func.isRequired,\n  authenticationStatus: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n","const ADD_SETTINGS = 'ADD_SETTINGS';\n\nconst addSettingsAction = (config) => ({\n  type: ADD_SETTINGS,\n  config,\n});\n\nexport { addSettingsAction, ADD_SETTINGS };\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './NotFound.css';\nimport logo from '../trivia.png';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div className=\"not-found-main-container\">\n        <h1 className=\"not-found-title\">Page not found :(</h1>\n        <div className=\"image-container\">\n          <img src={ logo } alt=\"logo\" />\n        </div>\n        <Link className=\"redirect\" to=\"/\">Go Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Settings, Feedback, Ranking, Game, Login, NotFound } from './pages';\nimport { recoverPlayerRankingAction, updateAuthenticationAction,\n  playerLoginAction } from './actions';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.saveRanking = this.saveRanking.bind(this);\n  }\n\n  componentDidMount() {\n    const { recoverPlayerRanking, updateAuthentication, login } = this.props;\n    const storageRanking = localStorage.getItem('ranking');\n    const storageAuthentication = localStorage.getItem('authentified');\n    let storagePlayer = localStorage.getItem('state');\n    storagePlayer = (storagePlayer !== null) && JSON.parse(storagePlayer).player;\n    if (storageRanking !== null && JSON.parse(storageRanking) !== []) {\n      recoverPlayerRanking(JSON.parse(storageRanking));\n    }\n    if (storageAuthentication !== null) {\n      updateAuthentication(storageAuthentication);\n    }\n    if (storagePlayer !== null) {\n      login(storagePlayer);\n    }\n  }\n\n  componentDidUpdate() {\n    this.saveRanking();\n  }\n\n  componentWillUnmount() {\n    this.saveRanking();\n  }\n\n  saveRanking() {\n    const { ranking } = this.props;\n    localStorage.setItem('ranking', JSON.stringify(ranking));\n    return true;\n  }\n\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"/settings\" component={ Settings } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n        <Route exact path=\"/\" component={ Login } />\n        <Route component={ NotFound } />\n      </Switch>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ranking: state.ranking,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  recoverPlayerRanking: (e) => dispatch(recoverPlayerRankingAction(e)),\n  updateAuthentication: (e) => dispatch(updateAuthenticationAction(e)),\n  login: (e) => dispatch(playerLoginAction(e)),\n});\n\nApp.propTypes = {\n  ranking: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  recoverPlayerRanking: PropTypes.func.isRequired,\n  updateAuthentication: PropTypes.func.isRequired,\n  login: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOGIN, ADD_SCORE } from '../actions/playerAction';\n\nconst INITIAL_STATE = {\n  name: 'user',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst playerReducer = (state = INITIAL_STATE, action) => {\n  const { type, name, gravatarEmail, score, assertions } = action;\n  switch (type) {\n  case LOGIN:\n    return ({ ...state, name, gravatarEmail, score: 0, assertions: 0 });\n  case ADD_SCORE:\n    return ({\n      ...state,\n      score: state.score + score,\n      assertions: state.assertions + assertions,\n    });\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","import { ADD_TOKEN } from '../actions/tokenAction';\n\nconst INITIAL_STATE = { token: '', date: '' };\n\nconst tokenReducer = (state = INITIAL_STATE, action) => {\n  const { type, tokenObj } = action;\n  switch (type) {\n  case ADD_TOKEN:\n    return { ...tokenObj };\n  default:\n    return state;\n  }\n};\n\nexport default tokenReducer;\n","import { ADD_QUESTIONS } from '../actions/questionsAction';\n\nconst INITIAL_STATE = { questions: [] };\n\nconst questionsReducer = (state = INITIAL_STATE, action) => {\n  const { type, questions } = action;\n  switch (type) {\n  case ADD_QUESTIONS:\n    return { ...questions };\n  default:\n    return state;\n  }\n};\n\nexport default questionsReducer;\n","const ADD_QUESTIONS = 'ADD_QUESTIONS';\n\nconst questionsAction = (questions) => ({ type: ADD_QUESTIONS, questions });\n\nexport default questionsAction;\nexport { ADD_QUESTIONS };\n","import { ADD_TIMER, ADD_STOP } from '../actions/timerAction';\n\nconst INITIAL_STATE = { seconds: 30, stop: false };\n\nconst timerReducer = (state = INITIAL_STATE, action) => {\n  const { type, seconds, stop } = action;\n  switch (type) {\n  case ADD_TIMER:\n    return { ...state, seconds };\n  case ADD_STOP:\n    return { ...state, stop };\n  default:\n    return state;\n  }\n};\n\nexport default timerReducer;\n","import { ADD_PLAYER_RANKING, RECOVER_PLAYER_RANKING } from '../actions/rankingAction';\n\nconst INITIAL_STATE = [];\n\nconst rankingReducer = (state = INITIAL_STATE, action) => {\n  const { type, player, ranking } = action;\n  switch (type) {\n  case ADD_PLAYER_RANKING:\n    return ([...state, player]);\n  case RECOVER_PLAYER_RANKING:\n    return ([...ranking]);\n  default:\n    return state;\n  }\n};\n\nexport default rankingReducer;\n","import { ADD_SETTINGS } from '../actions/settingsAction';\n\nconst INITIAL_STATE = {\n  difficulty: 'any',\n  amount: 5,\n  type: 'any',\n  category: 'any',\n};\n\nconst settingsReducer = (state = INITIAL_STATE, action) => {\n  const { type, config } = action;\n  switch (type) {\n  case ADD_SETTINGS:\n    return ({ ...state, ...config });\n  default:\n    return state;\n  }\n};\n\nexport default settingsReducer;\n","import { UPDATE_AUTHENTICATION } from '../actions/authenticationAction';\n\nconst INITIAL_STATE = false;\n\nconst authenticationReducer = (state = INITIAL_STATE, action) => {\n  const { type, authenticationStatus } = action;\n  switch (type) {\n  case UPDATE_AUTHENTICATION:\n    return authenticationStatus;\n  default:\n    return state;\n  }\n};\n\nexport default authenticationReducer;\n","import { combineReducers } from 'redux';\nimport playerReducer from './playerReducer';\nimport tokenReducer from './tokenReducer';\nimport questionsReducer from './questionsReducer';\nimport timerReducer from './timerReducer';\nimport rankingReducer from './rankingReducer';\nimport settingsReducer from './settingsReducer';\nimport authenticationReducer from './authenticationReducer';\n\nexport default combineReducers({\n  player: playerReducer,\n  tokenObj: tokenReducer,\n  questions: questionsReducer,\n  timer: timerReducer,\n  ranking: rankingReducer,\n  settings: settingsReducer,\n  authenticationStatus: authenticationReducer,\n});\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nexport default createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk),\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  ),\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nconst toDeploy = true;\nconst toReturn = (toDeploy)\n  ? <HashRouter><App /></HashRouter>\n  : <BrowserRouter><App /></BrowserRouter>;\n\nReactDOM.render(\n  <Provider store={ store }>\n    { toReturn }\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";"],"sourceRoot":""}